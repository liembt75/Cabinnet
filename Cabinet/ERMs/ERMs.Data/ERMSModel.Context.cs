//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ERMs.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ERMSEntities : DbContext
    {
        public ERMSEntities()
            : base("name=ERMSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BR_BriefingDiary> BR_BriefingDiary { get; set; }
        public virtual DbSet<Exam_Banking_Answer> Exam_Banking_Answer { get; set; }
        public virtual DbSet<Exam_Banking_Question> Exam_Banking_Question { get; set; }
        public virtual DbSet<Exam_Banking_Testing> Exam_Banking_Testing { get; set; }
        public virtual DbSet<Exam_Banking_Testing_Section> Exam_Banking_Testing_Section { get; set; }
        public virtual DbSet<Exam_Question> Exam_Question { get; set; }
        public virtual DbSet<Exam_QuestionType> Exam_QuestionType { get; set; }
        public virtual DbSet<Exam_Tester> Exam_Tester { get; set; }
        public virtual DbSet<CR_Flight_Assessment> CR_Flight_Assessment { get; set; }
        public virtual DbSet<CR_Flight_Assessment_Items> CR_Flight_Assessment_Items { get; set; }
        public virtual DbSet<CR_Flight_FinalReport_Category> CR_Flight_FinalReport_Category { get; set; }
        public virtual DbSet<CR_Flight_FinalReport_Department> CR_Flight_FinalReport_Department { get; set; }
        public virtual DbSet<CR_Flight_FinalReport_Replied_Log> CR_Flight_FinalReport_Replied_Log { get; set; }
        public virtual DbSet<CR_Flight_FinalReport_SubCategory> CR_Flight_FinalReport_SubCategory { get; set; }
        public virtual DbSet<HR_Department> HR_Department { get; set; }
        public virtual DbSet<HR_Department_Employee> HR_Department_Employee { get; set; }
        public virtual DbSet<ER_Support> ER_Support { get; set; }
        public virtual DbSet<EX_Attachment> EX_Attachment { get; set; }
        public virtual DbSet<HR_Task> HR_Task { get; set; }
        public virtual DbSet<HR_Task_Management> HR_Task_Management { get; set; }
        public virtual DbSet<HR_Task_Management2> HR_Task_Management2 { get; set; }
        public virtual DbSet<Sys_Device> Sys_Device { get; set; }
        public virtual DbSet<Sys_Role> Sys_Role { get; set; }
        public virtual DbSet<Sys_Role_Activity> Sys_Role_Activity { get; set; }
        public virtual DbSet<Ticket_Airport> Ticket_Airport { get; set; }
        public virtual DbSet<Ticket_Bonus> Ticket_Bonus { get; set; }
        public virtual DbSet<Ticket_Booking> Ticket_Booking { get; set; }
        public virtual DbSet<Ticket_Employee> Ticket_Employee { get; set; }
        public virtual DbSet<Ticket_Form> Ticket_Form { get; set; }
        public virtual DbSet<Ticket_FormDetail> Ticket_FormDetail { get; set; }
        public virtual DbSet<Ticket_Quota> Ticket_Quota { get; set; }
        public virtual DbSet<Ticket_VNAReport> Ticket_VNAReport { get; set; }
        public virtual DbSet<VHR_Employee_Department> VHR_Employee_Department { get; set; }
        public virtual DbSet<CR_Crew_Task_Update_Log> CR_Crew_Task_Update_Log { get; set; }
        public virtual DbSet<CR_Flight_Crew> CR_Flight_Crew { get; set; }
        public virtual DbSet<CR_FlightInfo> CR_FlightInfo { get; set; }
        public virtual DbSet<CR_Trip> CR_Trip { get; set; }
        public virtual DbSet<HR_HealthCare> HR_HealthCare { get; set; }
        public virtual DbSet<Sys_Account> Sys_Account { get; set; }
        public virtual DbSet<Sys_Activity> Sys_Activity { get; set; }
        public virtual DbSet<Sys_Crew_Task_Category> Sys_Crew_Task_Category { get; set; }
        public virtual DbSet<HR_Form_Category> HR_Form_Category { get; set; }
        public virtual DbSet<Examinee_Banking> Examinee_Banking { get; set; }
        public virtual DbSet<Sys_User_Activity> Sys_User_Activity { get; set; }
        public virtual DbSet<Sys_User_Role> Sys_User_Role { get; set; }
        public virtual DbSet<CR_OJT> CR_OJT { get; set; }
        public virtual DbSet<CR_OJT_Category> CR_OJT_Category { get; set; }
        public virtual DbSet<CR_OJT_Lesson> CR_OJT_Lesson { get; set; }
        public virtual DbSet<CR_Survey> CR_Survey { get; set; }
        public virtual DbSet<EM_Message> EM_Message { get; set; }
        public virtual DbSet<CR_Survey_Item> CR_Survey_Item { get; set; }
        public virtual DbSet<CR_OJT_Item> CR_OJT_Item { get; set; }
        public virtual DbSet<CR_Survey_Category> CR_Survey_Category { get; set; }
        public virtual DbSet<HR_Forms> HR_Forms { get; set; }
        public virtual DbSet<Sys_LoggedIn> Sys_LoggedIn { get; set; }
        public virtual DbSet<CR_OJT_Lesson_Item> CR_OJT_Lesson_Item { get; set; }
        public virtual DbSet<CR_Survey_Banking_Item> CR_Survey_Banking_Item { get; set; }
        public virtual DbSet<CR_Airplane_Crew> CR_Airplane_Crew { get; set; }
        public virtual DbSet<Sys_Flight_Sync> Sys_Flight_Sync { get; set; }
        public virtual DbSet<CR_Flight_FinalReport> CR_Flight_FinalReport { get; set; }
        public virtual DbSet<Meeting_Detail> Meeting_Detail { get; set; }
        public virtual DbSet<Meeting_Section> Meeting_Section { get; set; }
        public virtual DbSet<Tours2018> Tours2018 { get; set; }
        public virtual DbSet<TourUser2018> TourUser2018 { get; set; }
        public virtual DbSet<EM_News> EM_News { get; set; }
        public virtual DbSet<TourRegister2018> TourRegister2018 { get; set; }
        public virtual DbSet<CR_Flight_Dutyfree> CR_Flight_Dutyfree { get; set; }
        public virtual DbSet<CR_FlightInfo_Netline> CR_FlightInfo_Netline { get; set; }
    
        public virtual ObjectResult<API_CR_USP_GetFlightCrew_Result> API_CR_USP_GetFlightCrew(Nullable<long> flightID, Nullable<long> tripID)
        {
            var flightIDParameter = flightID.HasValue ?
                new ObjectParameter("FlightID", flightID) :
                new ObjectParameter("FlightID", typeof(long));
    
            var tripIDParameter = tripID.HasValue ?
                new ObjectParameter("TripID", tripID) :
                new ObjectParameter("TripID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetFlightCrew_Result>("API_CR_USP_GetFlightCrew", flightIDParameter, tripIDParameter);
        }
    
        public virtual ObjectResult<API_USP_GetCrewDuty_by_Flight_Result> API_USP_GetCrewDuty_by_Flight(Nullable<int> flightid)
        {
            var flightidParameter = flightid.HasValue ?
                new ObjectParameter("Flightid", flightid) :
                new ObjectParameter("Flightid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_USP_GetCrewDuty_by_Flight_Result>("API_USP_GetCrewDuty_by_Flight", flightidParameter);
        }
    
        public virtual int SYS_BK_Flight_Clean()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SYS_BK_Flight_Clean");
        }
    
        public virtual int SYS_USP_Flight_Crew_Update_TripID(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SYS_USP_Flight_Crew_Update_TripID", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<SYS_GetRoleActivity_Result> SYS_GetRoleActivity(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SYS_GetRoleActivity_Result>("SYS_GetRoleActivity", roleIdParameter);
        }
    
        public virtual ObjectResult<SYS_GetUserActivity_Result> SYS_GetUserActivity(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SYS_GetUserActivity_Result>("SYS_GetUserActivity", userIdParameter);
        }
    
        public virtual ObjectResult<SYS_GetUserRole_Result> SYS_GetUserRole(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SYS_GetUserRole_Result>("SYS_GetUserRole", userIdParameter);
        }
    
        public virtual int USP_GetCRUD(Nullable<int> userId, string code, ObjectParameter create, ObjectParameter read, ObjectParameter update, ObjectParameter delete)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetCRUD", userIdParameter, codeParameter, create, read, update, delete);
        }
    
        public virtual ObjectResult<API_CR_USP_GetFlight_ByKeyword_Result> API_CR_USP_GetFlight_ByKeyword(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string keyword, string crewID, Nullable<bool> isGetAll, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var crewIDParameter = crewID != null ?
                new ObjectParameter("CrewID", crewID) :
                new ObjectParameter("CrewID", typeof(string));
    
            var isGetAllParameter = isGetAll.HasValue ?
                new ObjectParameter("IsGetAll", isGetAll) :
                new ObjectParameter("IsGetAll", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetFlight_ByKeyword_Result>("API_CR_USP_GetFlight_ByKeyword", fromdateParameter, todateParameter, keywordParameter, crewIDParameter, isGetAllParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_GetFlightCrewAdmin_Result> API_CR_USP_GetFlightCrewAdmin(Nullable<long> flightID, Nullable<long> tripID, Nullable<bool> isGetDelete)
        {
            var flightIDParameter = flightID.HasValue ?
                new ObjectParameter("FlightID", flightID) :
                new ObjectParameter("FlightID", typeof(long));
    
            var tripIDParameter = tripID.HasValue ?
                new ObjectParameter("TripID", tripID) :
                new ObjectParameter("TripID", typeof(long));
    
            var isGetDeleteParameter = isGetDelete.HasValue ?
                new ObjectParameter("IsGetDelete", isGetDelete) :
                new ObjectParameter("IsGetDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetFlightCrewAdmin_Result>("API_CR_USP_GetFlightCrewAdmin", flightIDParameter, tripIDParameter, isGetDeleteParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_GetBKFlightCrew_Result> API_CR_USP_GetBKFlightCrew(string fO_FlightNo, Nullable<System.DateTime> fO_Date, string fO_From_Place, string fO_End_Place)
        {
            var fO_FlightNoParameter = fO_FlightNo != null ?
                new ObjectParameter("FO_FlightNo", fO_FlightNo) :
                new ObjectParameter("FO_FlightNo", typeof(string));
    
            var fO_DateParameter = fO_Date.HasValue ?
                new ObjectParameter("FO_Date", fO_Date) :
                new ObjectParameter("FO_Date", typeof(System.DateTime));
    
            var fO_From_PlaceParameter = fO_From_Place != null ?
                new ObjectParameter("FO_From_Place", fO_From_Place) :
                new ObjectParameter("FO_From_Place", typeof(string));
    
            var fO_End_PlaceParameter = fO_End_Place != null ?
                new ObjectParameter("FO_End_Place", fO_End_Place) :
                new ObjectParameter("FO_End_Place", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetBKFlightCrew_Result>("API_CR_USP_GetBKFlightCrew", fO_FlightNoParameter, fO_DateParameter, fO_From_PlaceParameter, fO_End_PlaceParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_Flight_FinalReport_Get_Category_Result> API_CR_USP_Flight_FinalReport_Get_Category()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_Flight_FinalReport_Get_Category_Result>("API_CR_USP_Flight_FinalReport_Get_Category");
        }
    
        public virtual ObjectResult<API_CR_USP_GetFlightFinalReport_Result> API_CR_USP_GetFlightFinalReport(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetFlightFinalReport_Result>("API_CR_USP_GetFlightFinalReport", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_GetFlightCrew2_Result> API_CR_USP_GetFlightCrew2(Nullable<long> flightID, Nullable<long> tripID)
        {
            var flightIDParameter = flightID.HasValue ?
                new ObjectParameter("FlightID", flightID) :
                new ObjectParameter("FlightID", typeof(long));
    
            var tripIDParameter = tripID.HasValue ?
                new ObjectParameter("TripID", tripID) :
                new ObjectParameter("TripID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetFlightCrew2_Result>("API_CR_USP_GetFlightCrew2", flightIDParameter, tripIDParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_GetAssessmentList2_Result> API_CR_USP_GetAssessmentList2(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> fromFlightdate, Nullable<System.DateTime> toFlightdate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromFlightdateParameter = fromFlightdate.HasValue ?
                new ObjectParameter("FromFlightdate", fromFlightdate) :
                new ObjectParameter("FromFlightdate", typeof(System.DateTime));
    
            var toFlightdateParameter = toFlightdate.HasValue ?
                new ObjectParameter("ToFlightdate", toFlightdate) :
                new ObjectParameter("ToFlightdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetAssessmentList2_Result>("API_CR_USP_GetAssessmentList2", fromdateParameter, todateParameter, fromFlightdateParameter, toFlightdateParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_GetFlightAssessmentAvgScore_Result> API_CR_USP_GetFlightAssessmentAvgScore(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> fromFlightdate, Nullable<System.DateTime> toFlightdate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromFlightdateParameter = fromFlightdate.HasValue ?
                new ObjectParameter("FromFlightdate", fromFlightdate) :
                new ObjectParameter("FromFlightdate", typeof(System.DateTime));
    
            var toFlightdateParameter = toFlightdate.HasValue ?
                new ObjectParameter("ToFlightdate", toFlightdate) :
                new ObjectParameter("ToFlightdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetFlightAssessmentAvgScore_Result>("API_CR_USP_GetFlightAssessmentAvgScore", fromdateParameter, todateParameter, fromFlightdateParameter, toFlightdateParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_GetFlightFinalReportByID_Result> API_CR_USP_GetFlightFinalReportByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetFlightFinalReportByID_Result>("API_CR_USP_GetFlightFinalReportByID", iDParameter);
        }
    
        public virtual ObjectResult<HR_GetTasks_Result> HR_GetTasks(string crewid, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> status, Nullable<int> department, string keyword)
        {
            var crewidParameter = crewid != null ?
                new ObjectParameter("Crewid", crewid) :
                new ObjectParameter("Crewid", typeof(string));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HR_GetTasks_Result>("HR_GetTasks", crewidParameter, fromdateParameter, todateParameter, statusParameter, departmentParameter, keywordParameter);
        }
    
        public virtual ObjectResult<API_HR_USP_GetTaskChart_Result> API_HR_USP_GetTaskChart(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string keyword, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isAll, Nullable<bool> isCompleted, Nullable<bool> isInProgress, Nullable<bool> isLate, string departments)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isAllParameter = isAll.HasValue ?
                new ObjectParameter("IsAll", isAll) :
                new ObjectParameter("IsAll", typeof(bool));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var isInProgressParameter = isInProgress.HasValue ?
                new ObjectParameter("IsInProgress", isInProgress) :
                new ObjectParameter("IsInProgress", typeof(bool));
    
            var isLateParameter = isLate.HasValue ?
                new ObjectParameter("IsLate", isLate) :
                new ObjectParameter("IsLate", typeof(bool));
    
            var departmentsParameter = departments != null ?
                new ObjectParameter("Departments", departments) :
                new ObjectParameter("Departments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_HR_USP_GetTaskChart_Result>("API_HR_USP_GetTaskChart", fromdateParameter, todateParameter, keywordParameter, pageNumberParameter, pageSizeParameter, isAllParameter, isCompletedParameter, isInProgressParameter, isLateParameter, departmentsParameter);
        }
    
        public virtual ObjectResult<API_HR_USP_GetTaskInfo2_Result> API_HR_USP_GetTaskInfo2(Nullable<int> taskID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_HR_USP_GetTaskInfo2_Result>("API_HR_USP_GetTaskInfo2", taskIDParameter);
        }
    
        public virtual ObjectResult<API_HR_USP_GetTasks_Result> API_HR_USP_GetTasks(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string keyword, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isAll, Nullable<bool> isCompleted, Nullable<bool> isInProgress, Nullable<bool> isLate, string departments, Nullable<int> userID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isAllParameter = isAll.HasValue ?
                new ObjectParameter("IsAll", isAll) :
                new ObjectParameter("IsAll", typeof(bool));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var isInProgressParameter = isInProgress.HasValue ?
                new ObjectParameter("IsInProgress", isInProgress) :
                new ObjectParameter("IsInProgress", typeof(bool));
    
            var isLateParameter = isLate.HasValue ?
                new ObjectParameter("IsLate", isLate) :
                new ObjectParameter("IsLate", typeof(bool));
    
            var departmentsParameter = departments != null ?
                new ObjectParameter("Departments", departments) :
                new ObjectParameter("Departments", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_HR_USP_GetTasks_Result>("API_HR_USP_GetTasks", fromdateParameter, todateParameter, keywordParameter, pageNumberParameter, pageSizeParameter, isAllParameter, isCompletedParameter, isInProgressParameter, isLateParameter, departmentsParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SYS_GetDepartment_Result> SYS_GetDepartment(Nullable<int> employeeid)
        {
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("Employeeid", employeeid) :
                new ObjectParameter("Employeeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SYS_GetDepartment_Result>("SYS_GetDepartment", employeeidParameter);
        }
    
        public virtual ObjectResult<API_HR_USP_GetTaskManagement2ByTaskID_Result> API_HR_USP_GetTaskManagement2ByTaskID(Nullable<int> taskID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_HR_USP_GetTaskManagement2ByTaskID_Result>("API_HR_USP_GetTaskManagement2ByTaskID", taskIDParameter);
        }
    
        public virtual ObjectResult<API_HR_USP_GetTaskManagementByTaskID_Result> API_HR_USP_GetTaskManagementByTaskID(Nullable<int> taskID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_HR_USP_GetTaskManagementByTaskID_Result>("API_HR_USP_GetTaskManagementByTaskID", taskIDParameter);
        }
    
        public virtual ObjectResult<API_HR_USP_GetTasks2_Result> API_HR_USP_GetTasks2(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string keyword, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isAll, Nullable<bool> isCompleted, Nullable<bool> isInProgress, Nullable<bool> isLate, string departments, Nullable<int> accountID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isAllParameter = isAll.HasValue ?
                new ObjectParameter("IsAll", isAll) :
                new ObjectParameter("IsAll", typeof(bool));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var isInProgressParameter = isInProgress.HasValue ?
                new ObjectParameter("IsInProgress", isInProgress) :
                new ObjectParameter("IsInProgress", typeof(bool));
    
            var isLateParameter = isLate.HasValue ?
                new ObjectParameter("IsLate", isLate) :
                new ObjectParameter("IsLate", typeof(bool));
    
            var departmentsParameter = departments != null ?
                new ObjectParameter("Departments", departments) :
                new ObjectParameter("Departments", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_HR_USP_GetTasks2_Result>("API_HR_USP_GetTasks2", fromdateParameter, todateParameter, keywordParameter, pageNumberParameter, pageSizeParameter, isAllParameter, isCompletedParameter, isInProgressParameter, isLateParameter, departmentsParameter, accountIDParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_GetFlightFinalReport2_Result> API_CR_USP_GetFlightFinalReport2(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> fromFlightdate, Nullable<System.DateTime> toFlightdate, Nullable<bool> isGetDelete, Nullable<bool> isGetAllCategory, string category)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromFlightdateParameter = fromFlightdate.HasValue ?
                new ObjectParameter("FromFlightdate", fromFlightdate) :
                new ObjectParameter("FromFlightdate", typeof(System.DateTime));
    
            var toFlightdateParameter = toFlightdate.HasValue ?
                new ObjectParameter("ToFlightdate", toFlightdate) :
                new ObjectParameter("ToFlightdate", typeof(System.DateTime));
    
            var isGetDeleteParameter = isGetDelete.HasValue ?
                new ObjectParameter("IsGetDelete", isGetDelete) :
                new ObjectParameter("IsGetDelete", typeof(bool));
    
            var isGetAllCategoryParameter = isGetAllCategory.HasValue ?
                new ObjectParameter("IsGetAllCategory", isGetAllCategory) :
                new ObjectParameter("IsGetAllCategory", typeof(bool));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetFlightFinalReport2_Result>("API_CR_USP_GetFlightFinalReport2", fromdateParameter, todateParameter, fromFlightdateParameter, toFlightdateParameter, isGetDeleteParameter, isGetAllCategoryParameter, categoryParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_GetFlightFinalReportDeparmentByFinalReportID_Result> API_CR_USP_GetFlightFinalReportDeparmentByFinalReportID(Nullable<int> finalReport)
        {
            var finalReportParameter = finalReport.HasValue ?
                new ObjectParameter("FinalReport", finalReport) :
                new ObjectParameter("FinalReport", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetFlightFinalReportDeparmentByFinalReportID_Result>("API_CR_USP_GetFlightFinalReportDeparmentByFinalReportID", finalReportParameter);
        }
    
        public virtual ObjectResult<API_ER_USP_Get_Supports_Result> API_ER_USP_Get_Supports(Nullable<bool> isAdmin, string crewID, string filter, string keyword, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(bool));
    
            var crewIDParameter = crewID != null ?
                new ObjectParameter("CrewID", crewID) :
                new ObjectParameter("CrewID", typeof(string));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_ER_USP_Get_Supports_Result>("API_ER_USP_Get_Supports", isAdminParameter, crewIDParameter, filterParameter, keywordParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<API_ER_USP_Get_Support_BySupportID_Result> API_ER_USP_Get_Support_BySupportID(Nullable<int> supportID)
        {
            var supportIDParameter = supportID.HasValue ?
                new ObjectParameter("SupportID", supportID) :
                new ObjectParameter("SupportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_ER_USP_Get_Support_BySupportID_Result>("API_ER_USP_Get_Support_BySupportID", supportIDParameter);
        }
    
        public virtual ObjectResult<API_ER_USP_Get_Supports2_Result> API_ER_USP_Get_Supports2(Nullable<bool> isAdmin, string crewID, string filter, string keyword, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(bool));
    
            var crewIDParameter = crewID != null ?
                new ObjectParameter("CrewID", crewID) :
                new ObjectParameter("CrewID", typeof(string));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_ER_USP_Get_Supports2_Result>("API_ER_USP_Get_Supports2", isAdminParameter, crewIDParameter, filterParameter, keywordParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<API_HR_USP_GetHealthCare_Result> API_HR_USP_GetHealthCare()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_HR_USP_GetHealthCare_Result>("API_HR_USP_GetHealthCare");
        }
    
        public virtual ObjectResult<API_CR_USP_GetFlightFinalReportDepartment_Result> API_CR_USP_GetFlightFinalReportDepartment(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> fromFlightdate, Nullable<System.DateTime> toFlightdate, Nullable<bool> isGetDelete, Nullable<bool> isGetAllCategory, Nullable<int> category, Nullable<bool> isGetAllDepartment, Nullable<int> departmentID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromFlightdateParameter = fromFlightdate.HasValue ?
                new ObjectParameter("FromFlightdate", fromFlightdate) :
                new ObjectParameter("FromFlightdate", typeof(System.DateTime));
    
            var toFlightdateParameter = toFlightdate.HasValue ?
                new ObjectParameter("ToFlightdate", toFlightdate) :
                new ObjectParameter("ToFlightdate", typeof(System.DateTime));
    
            var isGetDeleteParameter = isGetDelete.HasValue ?
                new ObjectParameter("IsGetDelete", isGetDelete) :
                new ObjectParameter("IsGetDelete", typeof(bool));
    
            var isGetAllCategoryParameter = isGetAllCategory.HasValue ?
                new ObjectParameter("IsGetAllCategory", isGetAllCategory) :
                new ObjectParameter("IsGetAllCategory", typeof(bool));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var isGetAllDepartmentParameter = isGetAllDepartment.HasValue ?
                new ObjectParameter("IsGetAllDepartment", isGetAllDepartment) :
                new ObjectParameter("IsGetAllDepartment", typeof(bool));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetFlightFinalReportDepartment_Result>("API_CR_USP_GetFlightFinalReportDepartment", fromdateParameter, todateParameter, fromFlightdateParameter, toFlightdateParameter, isGetDeleteParameter, isGetAllCategoryParameter, categoryParameter, isGetAllDepartmentParameter, departmentIDParameter);
        }
    
        public virtual ObjectResult<ASP_GetFlights_Result> ASP_GetFlights(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string keyword)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ASP_GetFlights_Result>("ASP_GetFlights", fromdateParameter, todateParameter, keywordParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_GetFlightFinalReport3_Result> API_CR_USP_GetFlightFinalReport3(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> fromFlightdate, Nullable<System.DateTime> toFlightdate, Nullable<System.DateTime> fromDepartmentCreated, Nullable<System.DateTime> toDepartmentCreated, Nullable<System.DateTime> fromDepartmentReplied, Nullable<System.DateTime> toDepartmentReplied, Nullable<int> emergency, Nullable<int> reportStatus, Nullable<bool> isGetDelete, string category, Nullable<int> departmentID, string replier)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromFlightdateParameter = fromFlightdate.HasValue ?
                new ObjectParameter("FromFlightdate", fromFlightdate) :
                new ObjectParameter("FromFlightdate", typeof(System.DateTime));
    
            var toFlightdateParameter = toFlightdate.HasValue ?
                new ObjectParameter("ToFlightdate", toFlightdate) :
                new ObjectParameter("ToFlightdate", typeof(System.DateTime));
    
            var fromDepartmentCreatedParameter = fromDepartmentCreated.HasValue ?
                new ObjectParameter("FromDepartmentCreated", fromDepartmentCreated) :
                new ObjectParameter("FromDepartmentCreated", typeof(System.DateTime));
    
            var toDepartmentCreatedParameter = toDepartmentCreated.HasValue ?
                new ObjectParameter("ToDepartmentCreated", toDepartmentCreated) :
                new ObjectParameter("ToDepartmentCreated", typeof(System.DateTime));
    
            var fromDepartmentRepliedParameter = fromDepartmentReplied.HasValue ?
                new ObjectParameter("FromDepartmentReplied", fromDepartmentReplied) :
                new ObjectParameter("FromDepartmentReplied", typeof(System.DateTime));
    
            var toDepartmentRepliedParameter = toDepartmentReplied.HasValue ?
                new ObjectParameter("ToDepartmentReplied", toDepartmentReplied) :
                new ObjectParameter("ToDepartmentReplied", typeof(System.DateTime));
    
            var emergencyParameter = emergency.HasValue ?
                new ObjectParameter("Emergency", emergency) :
                new ObjectParameter("Emergency", typeof(int));
    
            var reportStatusParameter = reportStatus.HasValue ?
                new ObjectParameter("ReportStatus", reportStatus) :
                new ObjectParameter("ReportStatus", typeof(int));
    
            var isGetDeleteParameter = isGetDelete.HasValue ?
                new ObjectParameter("IsGetDelete", isGetDelete) :
                new ObjectParameter("IsGetDelete", typeof(bool));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var replierParameter = replier != null ?
                new ObjectParameter("Replier", replier) :
                new ObjectParameter("Replier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetFlightFinalReport3_Result>("API_CR_USP_GetFlightFinalReport3", fromdateParameter, todateParameter, fromFlightdateParameter, toFlightdateParameter, fromDepartmentCreatedParameter, toDepartmentCreatedParameter, fromDepartmentRepliedParameter, toDepartmentRepliedParameter, emergencyParameter, reportStatusParameter, isGetDeleteParameter, categoryParameter, departmentIDParameter, replierParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_GetAssessmentTotal_Result> API_CR_USP_GetAssessmentTotal(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> fromFlightdate, Nullable<System.DateTime> toFlightdate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromFlightdateParameter = fromFlightdate.HasValue ?
                new ObjectParameter("FromFlightdate", fromFlightdate) :
                new ObjectParameter("FromFlightdate", typeof(System.DateTime));
    
            var toFlightdateParameter = toFlightdate.HasValue ?
                new ObjectParameter("ToFlightdate", toFlightdate) :
                new ObjectParameter("ToFlightdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetAssessmentTotal_Result>("API_CR_USP_GetAssessmentTotal", fromdateParameter, todateParameter, fromFlightdateParameter, toFlightdateParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_GetAssessmentAvgScoreByQuestion_Result> API_CR_USP_GetAssessmentAvgScoreByQuestion(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> fromFlightdate, Nullable<System.DateTime> toFlightdate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromFlightdateParameter = fromFlightdate.HasValue ?
                new ObjectParameter("FromFlightdate", fromFlightdate) :
                new ObjectParameter("FromFlightdate", typeof(System.DateTime));
    
            var toFlightdateParameter = toFlightdate.HasValue ?
                new ObjectParameter("ToFlightdate", toFlightdate) :
                new ObjectParameter("ToFlightdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetAssessmentAvgScoreByQuestion_Result>("API_CR_USP_GetAssessmentAvgScoreByQuestion", fromdateParameter, todateParameter, fromFlightdateParameter, toFlightdateParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_GetAssAvgScoreGroupRouting_Result> API_CR_USP_GetAssAvgScoreGroupRouting(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> fromFlightdate, Nullable<System.DateTime> toFlightdate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromFlightdateParameter = fromFlightdate.HasValue ?
                new ObjectParameter("FromFlightdate", fromFlightdate) :
                new ObjectParameter("FromFlightdate", typeof(System.DateTime));
    
            var toFlightdateParameter = toFlightdate.HasValue ?
                new ObjectParameter("ToFlightdate", toFlightdate) :
                new ObjectParameter("ToFlightdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetAssAvgScoreGroupRouting_Result>("API_CR_USP_GetAssAvgScoreGroupRouting", fromdateParameter, todateParameter, fromFlightdateParameter, toFlightdateParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_GetAssAvgScoreTypeTVRouting_Result> API_CR_USP_GetAssAvgScoreTypeTVRouting(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> fromFlightdate, Nullable<System.DateTime> toFlightdate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromFlightdateParameter = fromFlightdate.HasValue ?
                new ObjectParameter("FromFlightdate", fromFlightdate) :
                new ObjectParameter("FromFlightdate", typeof(System.DateTime));
    
            var toFlightdateParameter = toFlightdate.HasValue ?
                new ObjectParameter("ToFlightdate", toFlightdate) :
                new ObjectParameter("ToFlightdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetAssAvgScoreTypeTVRouting_Result>("API_CR_USP_GetAssAvgScoreTypeTVRouting", fromdateParameter, todateParameter, fromFlightdateParameter, toFlightdateParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_GetFlightFinalReport4_Result> API_CR_USP_GetFlightFinalReport4(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> fromFlightdate, Nullable<System.DateTime> toFlightdate, Nullable<System.DateTime> fromDepartmentCreated, Nullable<System.DateTime> toDepartmentCreated, Nullable<System.DateTime> fromDepartmentReplied, Nullable<System.DateTime> toDepartmentReplied, Nullable<System.DateTime> fromReplied, Nullable<System.DateTime> toReplied, Nullable<int> emergency, Nullable<int> reportStatus, Nullable<bool> isGetDelete, string category, Nullable<int> departmentID, string replier)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromFlightdateParameter = fromFlightdate.HasValue ?
                new ObjectParameter("FromFlightdate", fromFlightdate) :
                new ObjectParameter("FromFlightdate", typeof(System.DateTime));
    
            var toFlightdateParameter = toFlightdate.HasValue ?
                new ObjectParameter("ToFlightdate", toFlightdate) :
                new ObjectParameter("ToFlightdate", typeof(System.DateTime));
    
            var fromDepartmentCreatedParameter = fromDepartmentCreated.HasValue ?
                new ObjectParameter("FromDepartmentCreated", fromDepartmentCreated) :
                new ObjectParameter("FromDepartmentCreated", typeof(System.DateTime));
    
            var toDepartmentCreatedParameter = toDepartmentCreated.HasValue ?
                new ObjectParameter("ToDepartmentCreated", toDepartmentCreated) :
                new ObjectParameter("ToDepartmentCreated", typeof(System.DateTime));
    
            var fromDepartmentRepliedParameter = fromDepartmentReplied.HasValue ?
                new ObjectParameter("FromDepartmentReplied", fromDepartmentReplied) :
                new ObjectParameter("FromDepartmentReplied", typeof(System.DateTime));
    
            var toDepartmentRepliedParameter = toDepartmentReplied.HasValue ?
                new ObjectParameter("ToDepartmentReplied", toDepartmentReplied) :
                new ObjectParameter("ToDepartmentReplied", typeof(System.DateTime));
    
            var fromRepliedParameter = fromReplied.HasValue ?
                new ObjectParameter("FromReplied", fromReplied) :
                new ObjectParameter("FromReplied", typeof(System.DateTime));
    
            var toRepliedParameter = toReplied.HasValue ?
                new ObjectParameter("ToReplied", toReplied) :
                new ObjectParameter("ToReplied", typeof(System.DateTime));
    
            var emergencyParameter = emergency.HasValue ?
                new ObjectParameter("Emergency", emergency) :
                new ObjectParameter("Emergency", typeof(int));
    
            var reportStatusParameter = reportStatus.HasValue ?
                new ObjectParameter("ReportStatus", reportStatus) :
                new ObjectParameter("ReportStatus", typeof(int));
    
            var isGetDeleteParameter = isGetDelete.HasValue ?
                new ObjectParameter("IsGetDelete", isGetDelete) :
                new ObjectParameter("IsGetDelete", typeof(bool));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var replierParameter = replier != null ?
                new ObjectParameter("Replier", replier) :
                new ObjectParameter("Replier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetFlightFinalReport4_Result>("API_CR_USP_GetFlightFinalReport4", fromdateParameter, todateParameter, fromFlightdateParameter, toFlightdateParameter, fromDepartmentCreatedParameter, toDepartmentCreatedParameter, fromDepartmentRepliedParameter, toDepartmentRepliedParameter, fromRepliedParameter, toRepliedParameter, emergencyParameter, reportStatusParameter, isGetDeleteParameter, categoryParameter, departmentIDParameter, replierParameter);
        }
    
        public virtual ObjectResult<USP_GetExamTester_Result> USP_GetExamTester(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetExamTester_Result>("USP_GetExamTester", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<USP_GetExamTester2_Result> USP_GetExamTester2(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string code)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetExamTester2_Result>("USP_GetExamTester2", fromdateParameter, todateParameter, codeParameter);
        }
    
        public virtual ObjectResult<USP_GetFromDetail_Result> USP_GetFromDetail(string type, string @base, Nullable<int> employeeType, Nullable<int> thamNienFrom, Nullable<int> thamNienTo)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var baseParameter = @base != null ?
                new ObjectParameter("Base", @base) :
                new ObjectParameter("Base", typeof(string));
    
            var employeeTypeParameter = employeeType.HasValue ?
                new ObjectParameter("EmployeeType", employeeType) :
                new ObjectParameter("EmployeeType", typeof(int));
    
            var thamNienFromParameter = thamNienFrom.HasValue ?
                new ObjectParameter("ThamNienFrom", thamNienFrom) :
                new ObjectParameter("ThamNienFrom", typeof(int));
    
            var thamNienToParameter = thamNienTo.HasValue ?
                new ObjectParameter("ThamNienTo", thamNienTo) :
                new ObjectParameter("ThamNienTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetFromDetail_Result>("USP_GetFromDetail", typeParameter, baseParameter, employeeTypeParameter, thamNienFromParameter, thamNienToParameter);
        }
    
        public virtual ObjectResult<USP_GetExamByExamTesterID_Result> USP_GetExamByExamTesterID(Nullable<int> examTesterID)
        {
            var examTesterIDParameter = examTesterID.HasValue ?
                new ObjectParameter("ExamTesterID", examTesterID) :
                new ObjectParameter("ExamTesterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetExamByExamTesterID_Result>("USP_GetExamByExamTesterID", examTesterIDParameter);
        }
    
        public virtual ObjectResult<USP_Ticket_Booking_Result> USP_Ticket_Booking(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string keyword)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Ticket_Booking_Result>("USP_Ticket_Booking", fromdateParameter, todateParameter, keywordParameter);
        }
    
        public virtual ObjectResult<USP_GetAllCRUDByUserID_Result> USP_GetAllCRUDByUserID(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllCRUDByUserID_Result>("USP_GetAllCRUDByUserID", userIdParameter);
        }
    
        public virtual ObjectResult<USP_GetEmployee_Result> USP_GetEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetEmployee_Result>("USP_GetEmployee");
        }
    
        public virtual ObjectResult<USP_GetFromDetailByReportID_Result> USP_GetFromDetailByReportID(Nullable<int> vNAReportID)
        {
            var vNAReportIDParameter = vNAReportID.HasValue ?
                new ObjectParameter("VNAReportID", vNAReportID) :
                new ObjectParameter("VNAReportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetFromDetailByReportID_Result>("USP_GetFromDetailByReportID", vNAReportIDParameter);
        }
    
        public virtual ObjectResult<USP_GetFromDetail1_Result> USP_GetFromDetail1(string type, string @base, Nullable<int> employeeType, Nullable<int> thamNienFrom, Nullable<int> thamNienTo)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var baseParameter = @base != null ?
                new ObjectParameter("Base", @base) :
                new ObjectParameter("Base", typeof(string));
    
            var employeeTypeParameter = employeeType.HasValue ?
                new ObjectParameter("EmployeeType", employeeType) :
                new ObjectParameter("EmployeeType", typeof(int));
    
            var thamNienFromParameter = thamNienFrom.HasValue ?
                new ObjectParameter("ThamNienFrom", thamNienFrom) :
                new ObjectParameter("ThamNienFrom", typeof(int));
    
            var thamNienToParameter = thamNienTo.HasValue ?
                new ObjectParameter("ThamNienTo", thamNienTo) :
                new ObjectParameter("ThamNienTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetFromDetail1_Result>("USP_GetFromDetail1", typeParameter, baseParameter, employeeTypeParameter, thamNienFromParameter, thamNienToParameter);
        }
    
        public virtual ObjectResult<SYS_GetRoleUser_Result> SYS_GetRoleUser(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SYS_GetRoleUser_Result>("SYS_GetRoleUser", roleIdParameter);
        }
    
        public virtual ObjectResult<SYS_GetUsersbyActivity_Result> SYS_GetUsersbyActivity(Nullable<int> activityId)
        {
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SYS_GetUsersbyActivity_Result>("SYS_GetUsersbyActivity", activityIdParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_GetFlightFinalReport5_Result> API_CR_USP_GetFlightFinalReport5(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> fromFlightdate, Nullable<System.DateTime> toFlightdate, Nullable<System.DateTime> fromDepartmentCreated, Nullable<System.DateTime> toDepartmentCreated, Nullable<System.DateTime> fromDepartmentReplied, Nullable<System.DateTime> toDepartmentReplied, Nullable<System.DateTime> fromReplied, Nullable<System.DateTime> toReplied, Nullable<int> emergency, Nullable<int> reportStatus, Nullable<bool> isGetDelete, string category, Nullable<int> departmentID, string replier)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fromFlightdateParameter = fromFlightdate.HasValue ?
                new ObjectParameter("FromFlightdate", fromFlightdate) :
                new ObjectParameter("FromFlightdate", typeof(System.DateTime));
    
            var toFlightdateParameter = toFlightdate.HasValue ?
                new ObjectParameter("ToFlightdate", toFlightdate) :
                new ObjectParameter("ToFlightdate", typeof(System.DateTime));
    
            var fromDepartmentCreatedParameter = fromDepartmentCreated.HasValue ?
                new ObjectParameter("FromDepartmentCreated", fromDepartmentCreated) :
                new ObjectParameter("FromDepartmentCreated", typeof(System.DateTime));
    
            var toDepartmentCreatedParameter = toDepartmentCreated.HasValue ?
                new ObjectParameter("ToDepartmentCreated", toDepartmentCreated) :
                new ObjectParameter("ToDepartmentCreated", typeof(System.DateTime));
    
            var fromDepartmentRepliedParameter = fromDepartmentReplied.HasValue ?
                new ObjectParameter("FromDepartmentReplied", fromDepartmentReplied) :
                new ObjectParameter("FromDepartmentReplied", typeof(System.DateTime));
    
            var toDepartmentRepliedParameter = toDepartmentReplied.HasValue ?
                new ObjectParameter("ToDepartmentReplied", toDepartmentReplied) :
                new ObjectParameter("ToDepartmentReplied", typeof(System.DateTime));
    
            var fromRepliedParameter = fromReplied.HasValue ?
                new ObjectParameter("FromReplied", fromReplied) :
                new ObjectParameter("FromReplied", typeof(System.DateTime));
    
            var toRepliedParameter = toReplied.HasValue ?
                new ObjectParameter("ToReplied", toReplied) :
                new ObjectParameter("ToReplied", typeof(System.DateTime));
    
            var emergencyParameter = emergency.HasValue ?
                new ObjectParameter("Emergency", emergency) :
                new ObjectParameter("Emergency", typeof(int));
    
            var reportStatusParameter = reportStatus.HasValue ?
                new ObjectParameter("ReportStatus", reportStatus) :
                new ObjectParameter("ReportStatus", typeof(int));
    
            var isGetDeleteParameter = isGetDelete.HasValue ?
                new ObjectParameter("IsGetDelete", isGetDelete) :
                new ObjectParameter("IsGetDelete", typeof(bool));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var replierParameter = replier != null ?
                new ObjectParameter("Replier", replier) :
                new ObjectParameter("Replier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetFlightFinalReport5_Result>("API_CR_USP_GetFlightFinalReport5", fromdateParameter, todateParameter, fromFlightdateParameter, toFlightdateParameter, fromDepartmentCreatedParameter, toDepartmentCreatedParameter, fromDepartmentRepliedParameter, toDepartmentRepliedParameter, fromRepliedParameter, toRepliedParameter, emergencyParameter, reportStatusParameter, isGetDeleteParameter, categoryParameter, departmentIDParameter, replierParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_GetFlightExclamationTask_Result> API_CR_USP_GetFlightExclamationTask(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string crewID, Nullable<bool> isGetAll, Nullable<bool> isExclamation, Nullable<bool> isGetDelete, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var crewIDParameter = crewID != null ?
                new ObjectParameter("CrewID", crewID) :
                new ObjectParameter("CrewID", typeof(string));
    
            var isGetAllParameter = isGetAll.HasValue ?
                new ObjectParameter("IsGetAll", isGetAll) :
                new ObjectParameter("IsGetAll", typeof(bool));
    
            var isExclamationParameter = isExclamation.HasValue ?
                new ObjectParameter("IsExclamation", isExclamation) :
                new ObjectParameter("IsExclamation", typeof(bool));
    
            var isGetDeleteParameter = isGetDelete.HasValue ?
                new ObjectParameter("IsGetDelete", isGetDelete) :
                new ObjectParameter("IsGetDelete", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetFlightExclamationTask_Result>("API_CR_USP_GetFlightExclamationTask", fromdateParameter, todateParameter, crewIDParameter, isGetAllParameter, isExclamationParameter, isGetDeleteParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_GetFlightExclamationTask1_Result> API_CR_USP_GetFlightExclamationTask1(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string crewID, Nullable<bool> isGetAll, Nullable<bool> isExclamation, Nullable<bool> isGetDelete, Nullable<bool> isGetLBMB, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var crewIDParameter = crewID != null ?
                new ObjectParameter("CrewID", crewID) :
                new ObjectParameter("CrewID", typeof(string));
    
            var isGetAllParameter = isGetAll.HasValue ?
                new ObjectParameter("IsGetAll", isGetAll) :
                new ObjectParameter("IsGetAll", typeof(bool));
    
            var isExclamationParameter = isExclamation.HasValue ?
                new ObjectParameter("IsExclamation", isExclamation) :
                new ObjectParameter("IsExclamation", typeof(bool));
    
            var isGetDeleteParameter = isGetDelete.HasValue ?
                new ObjectParameter("IsGetDelete", isGetDelete) :
                new ObjectParameter("IsGetDelete", typeof(bool));
    
            var isGetLBMBParameter = isGetLBMB.HasValue ?
                new ObjectParameter("IsGetLBMB", isGetLBMB) :
                new ObjectParameter("IsGetLBMB", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetFlightExclamationTask1_Result>("API_CR_USP_GetFlightExclamationTask1", fromdateParameter, todateParameter, crewIDParameter, isGetAllParameter, isExclamationParameter, isGetDeleteParameter, isGetLBMBParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<API_CR_USP_GetFlightCrewAdminExternalUnit_Result> API_CR_USP_GetFlightCrewAdminExternalUnit(Nullable<long> flightID, Nullable<long> tripID, Nullable<bool> isGetDelete)
        {
            var flightIDParameter = flightID.HasValue ?
                new ObjectParameter("FlightID", flightID) :
                new ObjectParameter("FlightID", typeof(long));
    
            var tripIDParameter = tripID.HasValue ?
                new ObjectParameter("TripID", tripID) :
                new ObjectParameter("TripID", typeof(long));
    
            var isGetDeleteParameter = isGetDelete.HasValue ?
                new ObjectParameter("IsGetDelete", isGetDelete) :
                new ObjectParameter("IsGetDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_CR_USP_GetFlightCrewAdminExternalUnit_Result>("API_CR_USP_GetFlightCrewAdminExternalUnit", flightIDParameter, tripIDParameter, isGetDeleteParameter);
        }
    
        public virtual ObjectResult<CR_GetNews_Result> CR_GetNews(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string keyword)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CR_GetNews_Result>("CR_GetNews", fromdateParameter, todateParameter, keywordParameter);
        }
    
        public virtual ObjectResult<CountTour2018_Result> CountTour2018()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CountTour2018_Result>("CountTour2018");
        }
    
        public virtual ObjectResult<GetRegister2018_Result> GetRegister2018()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRegister2018_Result>("GetRegister2018");
        }
    
        public virtual int USP_ReloadFlight_Dutyfree(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string modifierid, string modifier)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var modifieridParameter = modifierid != null ?
                new ObjectParameter("Modifierid", modifierid) :
                new ObjectParameter("Modifierid", typeof(string));
    
            var modifierParameter = modifier != null ?
                new ObjectParameter("Modifier", modifier) :
                new ObjectParameter("Modifier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ReloadFlight_Dutyfree", fromdateParameter, todateParameter, modifieridParameter, modifierParameter);
        }
    
        public virtual ObjectResult<USP_GetFlight_NetLine_Result> USP_GetFlight_NetLine(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string keyword)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetFlight_NetLine_Result>("USP_GetFlight_NetLine", fromdateParameter, todateParameter, keywordParameter);
        }
    
        public virtual ObjectResult<USP_GetFlight_Dutyfree_Result> USP_GetFlight_Dutyfree(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string keyword)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetFlight_Dutyfree_Result>("USP_GetFlight_Dutyfree", fromdateParameter, todateParameter, keywordParameter);
        }
    
        public virtual ObjectResult<USP_GetFlights_NL_FO_byFLT_Result> USP_GetFlights_NL_FO_byFLT(Nullable<System.DateTime> date, string route, string flightNo)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var routeParameter = route != null ?
                new ObjectParameter("Route", route) :
                new ObjectParameter("Route", typeof(string));
    
            var flightNoParameter = flightNo != null ?
                new ObjectParameter("FlightNo", flightNo) :
                new ObjectParameter("FlightNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetFlights_NL_FO_byFLT_Result>("USP_GetFlights_NL_FO_byFLT", dateParameter, routeParameter, flightNoParameter);
        }
    
        public virtual ObjectResult<USP_GetFlights_NL_FO_byKeyword_Result> USP_GetFlights_NL_FO_byKeyword(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string keyword)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetFlights_NL_FO_byKeyword_Result>("USP_GetFlights_NL_FO_byKeyword", fromdateParameter, todateParameter, keywordParameter);
        }
    }
}
